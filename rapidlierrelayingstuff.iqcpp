{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\npneumatic Pneumatic10 = pneumatic(PORT10);\nmotor pewpewMotorA = motor(PORT5, false);\nmotor pewpewMotorB = motor(PORT11, true);\nmotor_group pewpew = motor_group(pewpewMotorA, pewpewMotorB);\n\nmotor LMotorA = motor(PORT1, false);\nmotor LMotorB = motor(PORT6, true);\nmotor_group L = motor_group(LMotorA, LMotorB);\n\nmotor RMotorA = motor(PORT7, false);\nmotor RMotorB = motor(PORT12, true);\nmotor_group R = motor_group(RMotorA, RMotorB);\n\ntouchled TouchLED3 = touchled(PORT3);\ndistance Distance8 = distance(PORT8);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable, deadzone, intakeforward, intakereverse, pump, flywheel, aim;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Pneumatic10.extend(cylinder1);\n  Pneumatic10.retract(cylinder2);\n  Pneumatic10.pumpOn();\n  pewpew.setVelocity(100.0, percent);\n  pewpew.setMaxTorque(100.0, percent);\n  pewpew.setStopping(coast);\n  L.setStopping(brake);\n  R.setStopping(brake);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Pneumatic10.extend(cylinder1);\n  aim = 0.0;\n  while (true) {\n    if (Controller.ButtonRUp.pressing()) {\n      aim = aim + 1.0;\n      wait(0.3, seconds);\n    }\n    if (Controller.ButtonL3.pressing()) {\n      pump = pump + 1.0;\n      wait(0.3, seconds);\n    }\n    if (pump == 0.0) {\n      Pneumatic10.pumpOff();\n    }\n    if (pump == 1.0) {\n      Pneumatic10.pumpOn();\n    }\n    if (pump == 2.0) {\n      pump = 0.0;\n    }\n    if (Controller.ButtonFUp.pressing()) {\n      flywheel = flywheel + 1.0;\n      wait(0.3, seconds);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted3() {\n  L.setMaxTorque(100.0, percent);\n  R.setMaxTorque(100.0, percent);\n  deadzone = 10.0;\n  while (true) {\n    if (fabs(static_cast<float>(Controller.AxisB.position())) > deadzone || fabs(static_cast<float>(Controller.AxisD.position())) > deadzone) {\n      L.spin(forward);\n      R.spin(forward);\n      L.setVelocity((Controller.AxisD.position() + Controller.AxisB.position()), percent);\n      R.setVelocity((Controller.AxisB.position() - Controller.AxisD.position()), percent);\n    }\n    else {\n      L.stop();\n      R.stop();\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  Pneumatic10.retract(cylinder1);\n  wait(0.3, seconds);\n  Pneumatic10.extend(cylinder1);\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  intakereverse = intakereverse + 1.0;\n  intakeforward = 0.0;\n  wait(0.3, seconds);\n}\n\n// \"when started\" hat block\nint whenStarted4() {\n  intakeforward = 0.0;\n  intakereverse = 0.0;\n  while (true) {\n    if (intakeforward == 0.0 && intakereverse == 0.0) {\n      pewpew.stop();\n    }\n    if (intakeforward == 1.0 && intakereverse == 0.0) {\n      pewpew.spin(forward);\n    }\n    if (intakeforward == 0.0 && intakereverse == 1.0) {\n      pewpew.spin(reverse);\n    }\n    if (intakeforward == 2.0) {\n      intakeforward = 0.0;\n    }\n    if (intakereverse == 2.0) {\n      intakereverse = 0.0;\n    }\n    if (fmod(aim,2.0) == 1.0) {\n      Pneumatic10.extend(cylinder2);\n    }\n    else {\n      Pneumatic10.retract(cylinder2);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonEUp pressed\" hat block\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  pewpew.setVelocity(100.0, percent);\n}\n\n// \"when Controller ButtonEDown pressed\" hat block\nvoid onevent_ControllerButtonEDown_pressed_0() {\n  pewpew.setVelocity(50.0, percent);\n}\n\n// \"when started\" hat block\nint whenStarted5() {\n  while (true) {\n    if (pewpew.velocity(percent) > 80.0) {\n      TouchLED3.setColor(green);\n    } else if (pewpew.velocity(percent) > 70.0) {\n      TouchLED3.setColor(blue);\n    } else if (pewpew.velocity(percent) > 60.0) {\n      TouchLED3.setColor(yellow);\n    } else if (pewpew.velocity(percent) > 50.0) {\n      TouchLED3.setColor(orange);\n    } else {\n      TouchLED3.setColor(red);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  intakeforward = intakeforward + 1.0;\n  intakereverse = 0.0;\n  wait(0.3, seconds);\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n  Controller.ButtonEUp.pressed(onevent_ControllerButtonEUp_pressed_0);\n  Controller.ButtonEDown.pressed(onevent_ControllerButtonEDown_pressed_0);\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  vex::task ws2(whenStarted3);\n  vex::task ws3(whenStarted4);\n  vex::task ws4(whenStarted5);\n  whenStarted1();\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[10],"name":"Pneumatic10","customName":false,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"Fire","cylinder2":"Goal","cylinder1_reversed":"true","cylinder2_reversed":"false"},"triportSourcePort":22},{"port":[5,11],"name":"pewpew","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[1,6],"name":"L","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7,12],"name":"R","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"TouchLED3","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"Distance8","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.5","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}